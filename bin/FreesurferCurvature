#!/usr/bin/env python3

import vtk
import numpy
import sys
import os
import freesurfer
import nibabel
import getopt

import VTPUtils
import GraphUtils

#@profile
opts, args = getopt.getopt(sys.argv[1:], "vh", [])

if len(args) != 2:
    print("The ")
    print(sys.argv[0] + " <subject id> <hemi>")
    exit()

#numpy.set_printoptions(precision = 3, formatter = {'all':lambda x: "%.3f" % x})

geometryNIIFile = None

verbose = False
for o, a in opts:
    if o == '-v':
        verbose = True

SubjId = args[0]
Hemi = args[1]

SurfDir = os.path.join(os.environ['SUBJECTS_DIR'], SubjId, 'surf')

if not os.path.isdir(SurfDir):
    print("Could not find surface directory: " + SurfDir)
    exit()


WhiteSurf = freesurfer.readSurf(os.path.join(SurfDir, Hemi + '.smoothwm'))
#PialSurf = freesurfer.readSurf(os.path.join(SurfDir, Hemi + '.pial'))

# put the white matter surface into a vtkPolyData structure
trianglePolyData = vtk.vtkPolyData()

points = vtk.vtkPoints()
triangles = vtk.vtkCellArray()

for z in range(WhiteSurf['vertices'].shape[1]):
    points.InsertNextPoint(WhiteSurf['vertices'][0, z], WhiteSurf['vertices'][1, z], WhiteSurf['vertices'][2, z])

for z in range(WhiteSurf['faces'].shape[1]):
    triangle = vtk.vtkTriangle()
    triangle.GetPointIds().SetId(0, WhiteSurf['faces'][0, z])
    triangle.GetPointIds().SetId(1, WhiteSurf['faces'][1, z])
    triangle.GetPointIds().SetId(2, WhiteSurf['faces'][2, z])
    
    triangles.InsertNextCell(triangle)

trianglePolyData.SetPoints(points)
trianglePolyData.SetPolys(triangles)

c = vtk.vtkCurvatures()
c.SetCurvatureTypeToMean()
c.SetInputData(trianglePolyData)
c.SetInvertMeanCurvature(True)
c.Update()

H = c.GetOutput().GetPointData().GetScalars()

MeanCurvature = numpy.array([H.GetTuple(arrayIDX) for arrayIDX in range(H.GetNumberOfTuples())]).ravel()

# smooth the curvatures

OldSmoothedMeanCurvature = numpy.single(numpy.array(MeanCurvature))

VertexNeighbours = GraphUtils.getVertexNeighbours(WhiteSurf)

navgs = 10

for CurIter in range(navgs):
    NewSmoothedMeanCurvature = numpy.array(OldSmoothedMeanCurvature)
    for z in range(WhiteSurf['vertices'].shape[1]):
    NewSmoothedMeanCurvature[z] = NewSmoothedMeanCurvature[z] + numpy.sum(OldSmoothedMeanCurvature[VertexNeighbours[z]])
    NewSmoothedMeanCurvature[z] = NewSmoothedMeanCurvature[z] / (VertexNeighbours[z].size + 1.0)
    OldSmoothedMeanCurvature = numpy.array(NewSmoothedMeanCurvature)

curCurv = {'numVertices': WhiteSurf['vertices'].shape[1], 'numFaces': WhiteSurf['faces'].shape[1], 'values': numpy.single(NewSmoothedMeanCurvature)}
freesurfer.writeCurv(curCurv, os.path.join(SurfDir, Hemi + '.vtk.curv'))

G = freesurfer.readCurv(os.path.join(SurfDir, Hemi + '.curv'))
H = freesurfer.readCurv(os.path.join(SurfDir, Hemi + '.smoothwm.H'))
HC = freesurfer.readCurv(os.path.join(SurfDir, Hemi + '.smoothwm.H.crv'))
