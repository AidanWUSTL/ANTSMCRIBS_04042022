#!/usr/bin/env python3

import vtk
import numpy
import sys
import os
import freesurfer
import nibabel
import getopt

import scipy.ndimage.morphology
import VTPUtils

import GraphUtils
#import matplotlib.pyplot as plt

opts, args = getopt.getopt(sys.argv[1:], "vh", ['surf-volgeom='])

if len(args) != 3:
	print("The number of arguments must be 3")
	print(sys.argv[0] + " <vtp file> <fs surface file> <curv file>")
	exit()

numpy.set_printoptions(precision = 3, formatter = {'all':lambda x: "%.3f" % x})

inVTPFileName = args[0]
inFSFileName = args[1]
#inASEGFileName = args[2]
outLabelFileName = args[2]

VTPSurf = VTPUtils.readVTPSurf(inVTPFileName)
FaceCortexMask = VTPUtils.readVTPCellArray(inVTPFileName, 'CortexMask')
FSSurf = freesurfer.readSurf(inFSFileName)

FaceCortexMask = (FaceCortexMask == 1)

VertexCortexMask = numpy.zeros(VTPSurf['vertices'].shape[1], dtype = numpy.bool)

for z in range(VTPSurf['faces'].shape[1]):
	if FaceCortexMask[z] == True:
		VertexCortexMask[VTPSurf['faces'][:, z]] = True

# erase CC and thalamus from the masks
#ASEGMGZ = nibabel.load(inASEGFileName)
#ASEGIMG = ASEGMGZ.get_data()

#ASEGVox2RASTKR = numpy.matrix(ASEGMGZ.header.get_vox2ras_tkr())
#ASEGRASTKR2Vox = numpy.linalg.inv(ASEGVox2RASTKR)
#
#TransformedV = ASEGRASTKR2Vox[0:3, 0:3] * numpy.matrix(FSSurf['vertices']) + ASEGRASTKR2Vox[0:3, 3]
#
#TransformedVRound = numpy.int16(numpy.array(numpy.round(TransformedV)))
#
##C = 100
#
##plt.imshow(ASEGIMG[:, :, C])
#
##I = numpy.where(TransformedVRound[2] == C)[0]
#
##plt.plot(TransformedVRound[1, I], TransformedVRound[0, I], '*')
#
##plt.show()
##CCSEGIMG = numpy.reshape(numpy.in1d(ASEGIMG, numpy.array([250, 251, 252, 253, 254, 255, 10])), ASEGIMG.shape)
#
##CCSEGIMG = scipy.ndimage.morphology.binary_dilation(CCSEGIMG, iterations = 2)
##ASEGIMG[CCSEGIMG] = 255
#
#ASEGV = ASEGIMG[(TransformedVRound[0], TransformedVRound[1], TransformedVRound[2])]
#
#ValidASEGV = numpy.logical_not(numpy.in1d(ASEGV, numpy.array([250, 251, 252, 253, 254, 255, 10, 48])))
##ValidASEGV = numpy.reshape(ValidASEGV, ASEGV.shape)
#
#T = numpy.array(VertexCortexMask)
#VertexCortexMask = numpy.logical_and(VertexCortexMask, ValidASEGV)
#
##VertexCortexMask = (numpy.logical_and(T, numpy.logical_not(ValidASEGV)))
## remove small regions of masked out vertices
#CC = GraphUtils.connectedComponents(FSSurf, numpy.logical_not(VertexCortexMask))
#
#N = numpy.bincount(CC[numpy.logical_not(VertexCortexMask)])
#T = numpy.argmax(N)
#
#VertexCortexMask[numpy.logical_and(CC != T, CC > 0)] = True
#
FID = open(outLabelFileName, 'w')

FID.write("#!ascii label  , from subject  vox2ras=TkReg\n")
FID.write("%d" % numpy.count_nonzero(VertexCortexMask) + "\n")

I = numpy.where(VertexCortexMask)[0]

for z in I:
	FID.write("%d  %f  %f  %f  0.00000\n" % (z, FSSurf['vertices'][0, z], FSSurf['vertices'][1, z],  FSSurf['vertices'][2, z]))
FID.close()
#C['values'] = VTPUtils.vertexRegionId(S['faces'], FaceCortexMask)

#freesurfer.writeCurv(C, args[1])


