#!/usr/bin/env python3

import vtk
import numpy
import sys
import os
import freesurfer
import nibabel
import getopt
import vtk.util.numpy_support

# append python paths
P = os.path.realpath(__file__)
head, tail = os.path.split(P)
sys.path.append(os.path.join(head, '..', 'lib', 'python'))

del P
del head
del tail

import freesurfer
opts, args = getopt.getopt(sys.argv[1:], "vh", ['surf-volgeom='])

if len(args) != 1:
    print("The number of arguments must be 1")
    print(sys.argv[0] + " <vtp file>")
    exit()

numpy.set_printoptions(precision = 3, formatter = {'all':lambda x: "%.3f" % x})

inFileName = args[0]

path, ext = os.path.splitext(inFileName)

if ext == ".vtp":
    Reader = vtk.vtkXMLPolyDataReader()
elif ext == ".vtk":
    Reader = vtk.vtkPolyDataReader()

Reader.SetFileName(inFileName)
Reader.Update()

inFilePrefix = os.path.splitext(inFileName)[0]

geometryNIIFile = None

verbose = False
TKROnly = False
for o, a in opts:
    if o == '--surf-volgeom':
        geometryNIIFile = a
    if o == '--tkr-only':
        TKROnly = True
    if o == '-v':
        verbose = True
    if o == '--surf-volgeom':
            geometryNIIFile = a

if verbose == True:
    print(inFilePrefix)
#SurfReader = vtk.vtkXMLPolyDataReader()
#SurfReader.SetFileName(surfFileName)
#SurfReader.Update()

# the curvature files have scalar arrays in the point data
#A = surfData.GetPointData()
#B = A.GetArray(0)
#C = numpy.array([B.GetValue(i) for i in range(B.GetNumberOfTuples())])

#surfData = SurfReader.GetOutput()

Data = Reader.GetOutput()
#Vrts = Data.GetVerts()
#D = Vrts.GetData()
#indices = [D.GetValue(i) for i in range(1, Vrts.GetSize())]

S = dict()
#S['vertices'] = [list(Data.GetPoint(point_id)) for point_id in range(Data.GetNumberOfPoints())]
#S['vertices'] = numpy.stack(S['vertices']).T
S['vertices'] = numpy.array(vtk.util.numpy_support.vtk_to_numpy(Data.GetPoints().GetData())).T

if Data.GetNumberOfPolys() > 0:
    D = Data.GetPolys().GetData()
    #S['faces'] = [[int(D.GetValue(j)) for j in range(i*4 + 1, i*4 + 4)] for i in range(Data.GetPolys().GetNumberOfCells())]
    #S['faces'] = numpy.stack(S['faces']).T
    S['faces'] = numpy.array(vtk.util.numpy_support.vtk_to_numpy(D))
    S['faces'] = numpy.reshape(S['faces'], (int(S['faces'].size / 4), 4)).T
    S['faces'] = S['faces'][1:]

    freesurfer.writeSurf(S, inFilePrefix + '_tkr.surf', fileFormat = 'binary', geometryNIIFile = geometryNIIFile)
    if TKROnly == False:
        freesurfer.writeSurf(S, inFilePrefix + '_world.surf', fileFormat = 'binary', geometryNIIFile = None)
# now do the point data arrays
pointData = Data.GetPointData()

for arrayIDX in range(pointData.GetNumberOfArrays()):
    curArrayName = pointData.GetArrayName(arrayIDX)
    curArrayName = curArrayName.replace(" ", "_")
    if verbose == True:
        print(curArrayName)
    curArray = numpy.array(vtk.util.numpy_support.vtk_to_numpy(pointData.GetArray(arrayIDX)))
    #curArray = [curArray.GetTuple(arrayIDX) for arrayIDX in range(curArray.GetNumberOfTuples())]
    #curArray = numpy.array(curArray)
    #curArray = numpy.array(vtk.util.numpy_support.vtk_to_numpy(curArray))
    #print(curArray.shape)
    # check the number of columns in the array
    if curArray.ndim > 1:
        if curArray.shape[1] == 3:
            # these are 3d points, save them as a surface
            curSurf = {'vertices': None, 'faces': None}
            curSurf['vertices'] = numpy.array(curArray).T
            freesurfer.writeSurf(curSurf, inFilePrefix + '.' + curArrayName + '.surf' , fileFormat = 'binary')
            del curSurf
    else:
        # this is a scalar for each vertex, save as a curvature file
        curCurv = {'numVertices': curArray.shape[0], 'numFaces': 0}
        curCurv['values'] = numpy.ravel(curArray)
        freesurfer.writeCurv(curCurv, inFilePrefix + '.' + curArrayName + '.curv')

cellData = Data.GetCellData()
for arrayIDX in range(cellData.GetNumberOfArrays()):
    curArrayName = cellData.GetArrayName(arrayIDX)
    curArrayName = curArrayName.replace(" ", "_")
    if verbose == True:
        print(curArrayName)
    curArray = numpy.array(vtk.util.numpy_support.vtk_to_numpy(cellData.GetArray(arrayIDX)))
    # check the number of columns in the array
    if curArray.ndim > 1:
        if curArray.shape[1] == 3:
            # these are 3d points, save them as a surface
            curSurf = {'vertices': None, 'faces': None}
            curSurf['vertices'] = numpy.array(curArray).T
            freesurfer.writeSurf(curSurf, inFilePrefix + '.' + curArrayName + '.surf' , fileFormat = 'binary')
            del curSurf
    else:
        # this is a scalar for each vertex, save as a curvature file
        curCurv = {'numVertices': curArray.shape[0], 'numFaces': 0}
        curCurv['values'] = numpy.ravel(curArray)
        freesurfer.writeCurv(curCurv, inFilePrefix + '.' + curArrayName + '.curv')
