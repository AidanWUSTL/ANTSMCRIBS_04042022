#!/usr/bin/env python3

import nibabel
import os
import sys
import numpy
import scipy
import getopt

import NIFTIOrientationTools
import Utils

opts, args = getopt.getopt(sys.argv[1:], "vh", ['interp-method='])

if len(args) != 3:
    print("The number of arguments must be 3")
    print(sys.argv[0] + " [--interp-method=] <input file> <new voxel size> <output file>")
    exit()

inputFileName = args[0]
newVoxelSizeStr = args[1]
outputFileName = args[2]

if not os.path.isfile(inputFileName):
    print("Input file not found: " + inputFileName)
    quit()

inputNII = nibabel.load(inputFileName)

interpMethod = 'linear'

for o, a in opts:
    if o == '--interp-method':
        interpMethod = a
    if o == '-v':
        verbose = True

if not interpMethod in ['linear', 'nearest']:
    print("Interpolation method not supported")
    quit()

(outputDir, Junk) = os.path.split(outputFileName)

Utils.mkdirSafe(outputDir)

# make axis codes for axial slices, radiological
refAXCodes = ('L', 'A', 'S')
refOrnt = nibabel.orientations.axcodes2ornt(refAXCodes)

inputAXCodes = nibabel.aff2axcodes(inputNII.affine)
inputOrnt = nibabel.orientations.axcodes2ornt(inputAXCodes)

inputToRefTransform = nibabel.orientations.ornt_transform(inputOrnt, refOrnt)
outputIMG = nibabel.orientations.apply_orientation(numpy.asanyarray(inputNII.dataobj), inputToRefTransform)

newAffine = NIFTIOrientationTools.applyOrntToNIIAffine(inputNII, inputToRefTransform)

oldPixDims = numpy.ravel(numpy.array(numpy.sqrt(numpy.sum(numpy.multiply(newAffine[0:3, 0:3], newAffine[0:3, 0:3]), axis = 1))))

try:
    newVoxelSize = float(newVoxelSizeStr)
except Exception:
    # it is volume preserving
    oldVol = numpy.prod(oldPixDims)
    # numpy.cbrt is cube-root
    newVoxelSize = numpy.cbrt(oldVol)

    print(("Volume preserving " + str(newVoxelSize)))


# set the new pixel dimensions
newAffine[0:3, 0:3] = newAffine[0:3, 0:3] / oldPixDims * newVoxelSize

# resample
oldxx = numpy.arange(outputIMG.shape[0]) * oldPixDims[0]
oldyy = numpy.arange(outputIMG.shape[1]) * oldPixDims[1]
oldzz = numpy.arange(outputIMG.shape[2]) * oldPixDims[2]

# make
newxx = numpy.arange(0, oldxx[-1] + newVoxelSize / 2, newVoxelSize)
newyy = numpy.arange(0, oldyy[-1] + newVoxelSize / 2, newVoxelSize)
newzz = numpy.arange(0, oldzz[-1] + newVoxelSize / 2, newVoxelSize)

newX, newY, newZ = numpy.meshgrid(newxx, newyy, newzz, indexing = 'ij')

newIMG = Utils.interp3q(oldyy, oldxx, oldzz, numpy.double(outputIMG), newY, newX, newZ, extrapval = 0, interpmethod = interpMethod)
newIMG = newIMG.astype(inputNII.get_data_dtype())

newNII = nibabel.Nifti1Image(newIMG, affine = newAffine)
nibabel.save(newNII, outputFileName)
