#!/usr/bin/env python3

import numpy
import sys
import os
import nibabel
import pandas

import freesurfer
import GraphUtils

if len(sys.argv) < 4:
    print("Incorrect number of arguments")
    print()
    print("Usage: " + sys.argv[0] + " <subject id> <hemi>")
    print("Performs the parcellation stats on the white matter surface given a parcellation annot file")
    quit()

# ColHeaders  Index SegId NVoxels Volume_mm3 StructName normMean normStdDev normMin normMax normRange

try:
    SubjectsDir = os.environ['SUBJECTS_DIR']
except Exception:
    print("Could not find the SUBJECTS_DIR environment variable")
    exit()

SubjectID = sys.argv[1]
Hemis = sys.argv[2]
Atlas = sys.argv[3]

if Hemis == 'both':
    Hemis = ['lh', 'rh']
else:
    Hemis = [Hemis]

# check for all the files

def checkFilesReturnNameOnFailure(fileList):
    for curFile in fileList:
        if not os.path.isfile(curFile):
            return curFile
    return None

for Hemi in Hemis:
    LabelFileName = os.path.join(SubjectsDir, SubjectID, 'label', Hemi + '.cortex.label')
    AreaFileName = os.path.join(SubjectsDir, SubjectID, 'surf', Hemi + '.area')
    ThicknessFileName = os.path.join(SubjectsDir, SubjectID, 'surf', Hemi + '.thickness')
    AnnotFileName = os.path.join(SubjectsDir, SubjectID, 'label', Hemi + "." + Atlas + ".annot")
    WhiteSurfFileName = os.path.join(SubjectsDir, SubjectID, 'surf', Hemi + ".white")
    MeanCurvFileName = os.path.join(SubjectsDir, SubjectID, 'surf', Hemi + ".smoothwm.H.crv")
    GaussCurvFileName = os.path.join(SubjectsDir, SubjectID, 'surf', Hemi + ".smoothwm.K.crv")
    SurfVolFileName = os.path.join(SubjectsDir, SubjectID, 'surf', Hemi + ".volume")
    K1CurvFileName = os.path.join(SubjectsDir, SubjectID, 'surf', Hemi + ".smoothwm.K1.crv")
    K2CurvFileName = os.path.join(SubjectsDir, SubjectID, 'surf', Hemi + ".smoothwm.K2.crv")

    R = checkFilesReturnNameOnFailure([LabelFileName, AreaFileName, ThicknessFileName, AnnotFileName, MeanCurvFileName, GaussCurvFileName])

    if not R is None:
        print("Could not find: " + R)
        quit()

    CortexLabel = freesurfer.readLabel(LabelFileName)
    AreaData = freesurfer.readCurv(AreaFileName)
    ThicknessData = freesurfer.readCurv(ThicknessFileName)
    MeanCurvData = freesurfer.readCurv(MeanCurvFileName)
    GaussCurvData = freesurfer.readCurv(GaussCurvFileName)
    K1CurvData = freesurfer.readCurv(K1CurvFileName)
    K2CurvData = freesurfer.readCurv(K2CurvFileName)
    SurfVolData = freesurfer.readCurv(SurfVolFileName)
    WhiteSurf = freesurfer.readSurf(WhiteSurfFileName)

    vertexNeighbours = GraphUtils.getVertexNeighbours(WhiteSurf)

    Annot = freesurfer.readAnnot(AnnotFileName)
    CortexLabelIDX = CortexLabel['index']
    CortexLabelMask = numpy.zeros(Annot['seg'].size, dtype = numpy.bool)
    CortexLabelMask[CortexLabelIDX] = True
    
    #print(Annot['colortable']['labels'])
    AreaValues = AreaData['values']
    ThicknessValues = ThicknessData['values']
    MeanCurvValues = MeanCurvData['values']
    GaussCurvValues = GaussCurvData['values']
    try:
        SurfVolValues = SurfVolData['values']
    except Exception:
        print("Surf vol was not found, run --surfvol, GrayVol will be zeros")
        SurfVolValues = numpy.zeros((WhiteSurf['vertices'].shape[1]))

    K1CurvValues = K1CurvData['values']
    K2CurvValues = K2CurvData['values']

    outDF = pandas.DataFrame(columns = ['StructName', 'NumVert', 'SurfArea', 'GrayVol', 'ThickAvg', 'ThickStd', 'MeanCurv', 'GausCurv', 'FoldInd', 'CurvInd'])
    outDF.StructName = Annot['colortable']['struct_names']

    outDF = outDF[outDF.StructName != 'ctx-' + Hemi + '-unknown']
    outDF = outDF[outDF.StructName != 'unknown']

    #pd = pandas.DataFrame(columns = outDF.columns)
    #pd['StructName'] = pandas.Series('Medial_Wall')
    pd = dict.fromkeys(outDF.columns.names, numpy.nan)

    pd['StructName'] = 'Medial_Wall'
    outDF = outDF.append(pd, ignore_index = True)
    structsAndLabels = pandas.Series(index = Annot['colortable']['struct_names'], data = Annot['colortable']['labels'])
    #print(structsAndLabels)
    #print(outDF)
    outDF = outDF.loc[outDF.StructName != "None", :]
    for curStructIDX in outDF.index:
        if outDF.loc[curStructIDX, 'StructName'] == 'Medial_Wall':
            I = numpy.where(numpy.logical_not(CortexLabelMask))[0]
        else:
            curStructName = outDF.loc[curStructIDX, 'StructName']
            #print(Annot['label'].shape)
            #print(CortexLabelMask.shape)
            #print(curStructName)
            #print(structsAndLabels.loc[curStructName])
            I = numpy.where(numpy.logical_and(Annot['label'] == structsAndLabels.loc[curStructName], CortexLabelMask))[0]

        if I.size > 0:
            outDF.loc[curStructIDX, 'NumVert'] = I.size
            outDF.loc[curStructIDX, 'GrayVol'] = numpy.sum(SurfVolValues[I])
            outDF.loc[curStructIDX, 'SurfArea'] = numpy.sum(AreaValues[I])
            outDF.loc[curStructIDX, 'ThickAvg'] = numpy.mean(ThicknessValues[I])
            outDF.loc[curStructIDX, 'ThickStd'] = numpy.std(ThicknessValues[I])
            outDF.loc[curStructIDX, 'MeanCurv'] = numpy.mean(numpy.abs(MeanCurvValues[I]) * AreaValues[I])
            outDF.loc[curStructIDX, 'GausCurv'] = numpy.mean(numpy.abs(GaussCurvValues[I]) * AreaValues[I])

            if True:
                area = AreaValues[I]
                k1 = K1CurvValues[I]
                k2 = K2CurvValues[I]
                PosGauss = GaussCurvValues[I] > 0
                if numpy.any(PosGauss):
                    ici = numpy.sum(area[PosGauss] * GaussCurvValues[I[PosGauss]])
                else:
                    ici = 0

                fi = numpy.sum(area * numpy.abs(k1) * (numpy.abs(k1) - numpy.abs(k2)))
                outDF.loc[curStructIDX, 'FoldInd'] = fi / (4 * numpy.pi)
                outDF.loc[curStructIDX, 'CurvInd'] = ici / (4 * numpy.pi)
    #numericFields = ['NumVert', 'SurfArea', 'GrayVol', 'ThickAvg', 'ThickStd', 'MeanCurv', 'GausCurv', 'FoldInd', 'CurvInd']

    #for curField in numericFields:
    #    outDF[curField] = outDF[curField].to_numeric()
    outDF = outDF.loc[outDF.NumVert > 0, :]
    
    outDF.to_csv(os.path.join(SubjectsDir, SubjectID, 'stats', Hemi + "." + Atlas + ".stats"), index = False)
