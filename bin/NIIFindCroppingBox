#!/usr/bin/env python3

import nibabel
import os
import sys
import numpy
import scipy
import getopt

import NIFTIOrientationTools
import Utils

opts, args = getopt.getopt(sys.argv[1:], "vh", ['interp-method='])

if len(args) != 2:
    print("The number of arguments must be 3")
    print(sys.argv[0] + " <cropped file> <original file>")
    exit()

croppedFileName = args[0]
origFileName = args[1]

if not os.path.isfile(croppedFileName):
    print("Input file not found: " + croppedFileName)
    quit()

if not os.path.isfile(origFileName):
    print("Input file not found: " + origFileName)
    quit()

croppedNII = nibabel.load(croppedFileName)
origNII = nibabel.load(origFileName)
croppedIMG = croppedNII.get_data()
origIMG = origNII.get_data()

CornerRows = numpy.arange(origNII.shape[0] - croppedNII.shape[0] + 1)
CornerCols = numpy.arange(origNII.shape[1] - croppedNII.shape[1] + 1)
CornerSlices = numpy.arange(origNII.shape[2] - croppedNII.shape[2] + 1)

CornerROWS, CornerCOLS, CornerSLICES = numpy.meshgrid(CornerRows, CornerCols, CornerSlices, indexing = 'ij')

CornerROWS = numpy.ravel(CornerROWS)
CornerCOLS = numpy.ravel(CornerCOLS)
CornerSLICES = numpy.ravel(CornerSLICES)

initialCrop = True
if initialCrop == True:
    TopCornerEqualMask = origIMG[(CornerROWS, CornerCOLS, CornerSLICES)] == croppedIMG[0, 0, 0]
    EndCornerEqualMask = origIMG[(CornerROWS + croppedIMG.shape[0] - 1, CornerCOLS + croppedIMG.shape[1] - 1, CornerSLICES + croppedIMG.shape[2] - 1)] == croppedIMG[croppedIMG.shape[0] - 1, croppedIMG.shape[1] - 1, croppedIMG.shape[2] - 1]

    CornerMatchMask = numpy.logical_and(TopCornerEqualMask, EndCornerEqualMask)

    CornerROWS = CornerROWS[CornerMatchMask]
    CornerCOLS = CornerCOLS[CornerMatchMask]
    CornerSLICES = CornerSLICES[CornerMatchMask]

for curIDX in range(CornerROWS.size):
    if numpy.array_equal(croppedIMG, origIMG[CornerROWS[curIDX]:(CornerROWS[curIDX] + croppedIMG.shape[0]), CornerCOLS[curIDX]:(CornerCOLS[curIDX] + croppedIMG.shape[1]), CornerSLICES[curIDX]:(CornerSLICES[curIDX] + croppedIMG.shape[2])]):
        print(str(CornerROWS[curIDX]) + " " + str(croppedIMG.shape[0]) + " " + str(CornerCOLS[curIDX]) + " " + str(croppedIMG.shape[1]) + " " + str(CornerSLICES[curIDX]) + " " + str(croppedIMG.shape[2]))
        break
