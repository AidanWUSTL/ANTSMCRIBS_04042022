#!/usr/bin/env python3

import vtk
import numpy
import sys
import os
import freesurfer
import nibabel
import getopt

opts, args = getopt.getopt(sys.argv[1:], "vh", ['surf-volgeom='])

if len(args) != 1:
	print "The number of arguments must be 1"
	print sys.argv[0] + " <vtp file>"
	exit()

numpy.set_printoptions(precision = 3, formatter = {'all':lambda x: "%.3f" % x})

inFileName = args[0]

Reader = vtk.vtkXMLPolyDataReader()
Reader.SetFileName(inFileName)
Reader.Update()

inFilePrefix = os.path.splitext(inFileName)[0]

geometryNIIFile = None

verbose = False
for o, a in opts:
	if o == '--surf-volgeom':
		geometryNIIFile = a
	if o == '-v':
		verbose = True

Data = Reader.GetOutput()
#Vrts = Data.GetVerts()
#indices = [Vrts.GetData().GetValue(i) for i in range(1, Vrts.GetSize())]

S = dict()
#S['vertices'] = [list(Data.GetPoint(point_id)) for point_id in range(Data.GetNumberOfPoints())]
#S['vertices'] = numpy.stack(S['vertices']).T

if Data.GetNumberOfPolys() > 0:
	S['faces'] = [[int(Data.GetPolys().GetData().GetValue(j)) for j in range(i*4 + 1, i*4 + 4)] for i in range(Data.GetPolys().GetNumberOfCells())]
	S['faces'] = numpy.stack(S['faces']).T
	
# now do the point data arrays
cellData = Data.GetCellData()

for arrayIDX in range(cellData.GetNumberOfArrays()):
	curArrayName = cellData.GetArrayName(arrayIDX)
	if curArrayName == "CollisionType":
		curArray = cellData.GetArray(arrayIDX)
		curArray = [curArray.GetTuple(arrayIDX) for arrayIDX in range(curArray.GetNumberOfTuples())]
		curArray = numpy.array(curArray)
		FaceIDX = numpy.where(curArray > 0)[0]
		print S['faces'][0, FaceIDX[0]]
	#S['faces'] = numpy.take(S['faces'], numpy.array([0, 2, 1]), axis = 0)

#if checkForNegativeArea == True:
#	surfA = numpy.take(S['vertices'], S['faces'][0], axis = 1)
#	surfB = numpy.take(S['vertices'], S['faces'][1], axis = 1)
	#surfC = numpy.take(S['vertices'], S['faces'][2], axis = 1)

#	CrossABAC = numpy.cross(surfB - surfA, surfC - surfA

#numpy.set_printoptions(precision=4, formatter={'float': '{: 0.3f}'.format})
#freesurfer.writeSurf(S, sys.argv[3], fileFormat = 'binary', geometryNIIFile = sys.argv[2])
##freesurfer.writeSurf(S, sys.argv[3] + ".nogeom", fileFormat = 'binary', geometryNIIFile = None)
