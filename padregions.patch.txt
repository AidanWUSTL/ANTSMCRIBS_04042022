diff --git a/MIRTK/MIRTK/Applications/src/subdivide-brain-image.cc b/MIRTK/MIRTK/Applications/src/subdivide-brain-image.cc
index c8a6b27..4ac3a11 100644
--- a/MIRTK/MIRTK/Applications/src/subdivide-brain-image.cc
+++ b/MIRTK/MIRTK/Applications/src/subdivide-brain-image.cc
@@ -1723,7 +1723,10 @@ int main(int argc, char *argv[])
 
   // ---------------------------------------------------------------------------
   // Write output labels
-  regions.Write(output_name);
+  //regions.Write(output_name);
+  GreyImage paddedregions = regions.PadImage(2);
+
+  paddedregions.Write(output_name);
 
   // ---------------------------------------------------------------------------
   // Create distance map for interior of cortical surface
diff --git a/MIRTK/MIRTK/Modules/Image/include/mirtk/GenericImage.h b/MIRTK/MIRTK/Modules/Image/include/mirtk/GenericImage.h
index 5c75156..ead64a5 100644
--- a/MIRTK/MIRTK/Modules/Image/include/mirtk/GenericImage.h
+++ b/MIRTK/MIRTK/Modules/Image/include/mirtk/GenericImage.h
@@ -312,10 +312,18 @@ public:
   void GetRegion(GenericImage &, int, int, int,
                                  int, int, int) const;
 
+
   /// Get image consisting of specified 3D subregion
   virtual void GetRegion(BaseImage *&, int, int, int,
                                        int, int, int) const;
 
+  // Pad image
+  GenericImage PadImage(int) const;
+  void PadImage(GenericImage&, int) const;
+  virtual void PadImage(BaseImage*&, int) const;
+
+  //virtual void PadImage(GenericImage *&, int) const;
+
   /// Get image consisting of specified 4D subregion
   GenericImage GetRegion(int, int, int, int,
                          int, int, int, int) const;
diff --git a/MIRTK/MIRTK/Modules/Image/src/GenericImage.cc b/MIRTK/MIRTK/Modules/Image/src/GenericImage.cc
index ea0caaa..51acde8 100644
--- a/MIRTK/MIRTK/Modules/Image/src/GenericImage.cc
+++ b/MIRTK/MIRTK/Modules/Image/src/GenericImage.cc
@@ -512,6 +512,105 @@ void GenericImage<VoxelType>
   }
 }
 
+
+// -----------------------------------------------------------------------------
+// template <class VoxelType>
+// GenericImage<VoxelType> GenericImage<VoxelType>
+// ::PadImage(int m) const
+// {
+//   GenericImage<VoxelType> image;
+//   this->PadImage(image, m);
+//   return image;
+// }
+
+
+
+
+// -----------------------------------------------------------
+template <class VoxelType>
+GenericImage<VoxelType> GenericImage<VoxelType>
+::PadImage(int padSize) const
+{
+  GenericImage<VoxelType> image;
+  this->PadImage(image, padSize);
+  return image;
+}
+
+// -----------------------------------------------------------------------------
+template <class VoxelType>
+void GenericImage<VoxelType>
+::PadImage(GenericImage<VoxelType> &image, int padSize) const
+{
+  int i, j, k, l;
+  double x1, y1, z1, x2, y2, z2;
+
+  int i1, i2, j1, j2, k1, k2;
+
+  if (padSize <= 0) {
+    cerr << "GenericImage<VoxelType>::PadImage: Parameter out of range\n";
+    exit(1);
+  }
+
+  i1 = 0;
+  j1 = 0;
+  k1 = 0;
+
+  // Initialize
+  ImageAttributes attr = this->Attributes();
+  i2 = attr._x;
+  j2 = attr._y;
+  k2 = attr._z;
+
+  attr._x = attr._x + 2*padSize;
+  attr._y = attr._y + 2*padSize;
+  attr._z = attr._z + 2*padSize;
+
+  attr._xorigin = 0;
+  attr._yorigin = 0;
+  attr._zorigin = 0;
+  image.Initialize(attr);
+
+  // Calculate position of first voxel in roi in original image
+  x1 = 0;
+  y1 = 0;
+  z1 = 0;
+  this->ImageToWorld(x1, y1, z1);
+
+  // Calculate position of first voxel in roi in new image
+  x2 = padSize;
+  y2 = padSize;
+  z2 = padSize;
+  image.ImageToWorld(x2, y2, z2);
+
+  // Shift origin of new image accordingly
+  image.PutOrigin(x1 - x2, y1 - y2, z1 - z2);
+
+  // Copy region
+  for (l = 0; l < _attr._t; l++) {
+    for (k = k1; k < k2; k++) {
+      for (j = j1; j < j2; j++) {
+        for (i = i1; i < i2; i++) {
+          image._matrix[l][k + padSize][j + padSize][i + padSize] = _matrix[l][k][j][i];
+        }
+      }
+    }
+  }
+}
+
+// -----------------------------------------------------------------------------
+template <class VoxelType>
+void GenericImage<VoxelType>
+::PadImage(BaseImage *&base, int padSize) const
+{
+  GenericImage<VoxelType> *image = dynamic_cast<GenericImage<VoxelType> *>(base);
+  if (image == NULL) {
+    delete base;
+    image = new GenericImage<VoxelType>();
+    base  = image;
+  }
+  this->PadImage(*image, padSize);
+}
+
 // -----------------------------------------------------------------------------
 template <class VoxelType>
 GenericImage<VoxelType> GenericImage<VoxelType>
